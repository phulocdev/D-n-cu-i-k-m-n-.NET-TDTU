// <auto-generated />
using System;
using CharityConnect.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharityConnect.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241120141412_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharityConnect.Models.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hide")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cases");

                    b.HasData(
                        new
                        {
                            CaseId = 1,
                            CategoryId = 7,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8649),
                            Description = "Kêu gọi chung tay ủng hộ trẻ em nghèo ở vùng sâu vùng xa...",
                            Hide = false,
                            ImageUrl = "https://via.placeholder.com/150",
                            Location = "Yên Bái",
                            Meta = "",
                            Order = 1,
                            Title = "Hỗ trợ học sinh nghèo ở vùng sâu vùng xa"
                        },
                        new
                        {
                            CaseId = 2,
                            CategoryId = 3,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8651),
                            Description = "Cần sự hỗ trợ khẩn cấp để giúp gia đình bị mất nhà cửa sau cơn bão...",
                            Hide = false,
                            ImageUrl = "https://via.placeholder.com/150",
                            Location = "Quảng Bình",
                            Meta = "",
                            Order = 2,
                            Title = "Gia đình cần sự giúp đỡ sau bão lũ"
                        },
                        new
                        {
                            CaseId = 3,
                            CategoryId = 4,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8652),
                            Description = "Kêu gọi giúp đỡ chi phí cho bệnh nhân cần ghép thận gấp...",
                            Hide = false,
                            ImageUrl = "https://via.placeholder.com/150",
                            Location = "Hà Nội",
                            Meta = "",
                            Order = 3,
                            Title = "Hỗ trợ bệnh nhân cần ghép thận khẩn cấp"
                        },
                        new
                        {
                            CaseId = 4,
                            CategoryId = 5,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8654),
                            Description = "Hỗ trợ chi phí học tập và sinh hoạt cho trẻ em khuyết tật...",
                            Hide = false,
                            ImageUrl = "https://via.placeholder.com/150",
                            Location = "Thừa Thiên Huế",
                            Meta = "",
                            Order = 4,
                            Title = "Giúp đỡ trẻ em khuyết tật có cuộc sống tốt hơn"
                        },
                        new
                        {
                            CaseId = 5,
                            CategoryId = 6,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8655),
                            Description = "Chung tay xây dựng trường học kiên cố để trẻ em vùng sâu được học tập tốt hơn...",
                            Hide = false,
                            ImageUrl = "https://via.placeholder.com/150",
                            Location = "Kon Tum",
                            Meta = "",
                            Order = 5,
                            Title = "Xây dựng trường học cho trẻ em vùng sâu"
                        },
                        new
                        {
                            CaseId = 6,
                            CategoryId = 2,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8657),
                            Description = "Quyên góp để hỗ trợ chi phí học tập và sinh hoạt cho trẻ em mất cha mẹ vì COVID-19...",
                            Hide = false,
                            ImageUrl = "https://via.placeholder.com/150",
                            Location = "TP. Hồ Chí Minh",
                            Meta = "",
                            Order = 6,
                            Title = "Hỗ trợ trẻ em mồ côi do COVID-19"
                        },
                        new
                        {
                            CaseId = 7,
                            CategoryId = 8,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8659),
                            Description = "Kêu gọi sự giúp đỡ cho các gia đình bị ảnh hưởng bởi lũ quét miền Trung...",
                            Hide = false,
                            ImageUrl = "https://via.placeholder.com/150",
                            Location = "Quảng Nam",
                            Meta = "",
                            Order = 7,
                            Title = "Hỗ trợ nạn nhân lũ quét miền Trung"
                        },
                        new
                        {
                            CaseId = 8,
                            CategoryId = 1,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8660),
                            Description = "Quyên góp để hỗ trợ sinh hoạt phí và chăm sóc sức khỏe cho người già neo đơn...",
                            Hide = false,
                            ImageUrl = "https://via.placeholder.com/150",
                            Location = "Đà Nẵng",
                            Meta = "",
                            Order = 8,
                            Title = "Chăm sóc người già neo đơn không nơi nương tựa"
                        });
                });

            modelBuilder.Entity("CharityConnect.Models.CaseDonation", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "DonationId");

                    b.HasIndex("DonationId");

                    b.ToTable("CaseDonations");

                    b.HasData(
                        new
                        {
                            CaseId = 1,
                            DonationId = 2
                        },
                        new
                        {
                            CaseId = 2,
                            DonationId = 3
                        },
                        new
                        {
                            CaseId = 3,
                            DonationId = 1
                        },
                        new
                        {
                            CaseId = 4,
                            DonationId = 4
                        },
                        new
                        {
                            CaseId = 5,
                            DonationId = 5
                        },
                        new
                        {
                            CaseId = 6,
                            DonationId = 6
                        },
                        new
                        {
                            CaseId = 7,
                            DonationId = 7
                        },
                        new
                        {
                            CaseId = 8,
                            DonationId = 8
                        });
                });

            modelBuilder.Entity("CharityConnect.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hide")
                        .HasColumnType("bit");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8593),
                            Hide = false,
                            Meta = "nguoi-gia-neo-don",
                            Name = "Người già neo đơn",
                            Order = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8595),
                            Hide = false,
                            Meta = "tre-em-mo-coi",
                            Name = "Trẻ em mồ côi",
                            Order = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8596),
                            Hide = false,
                            Meta = "gia-dinh-kho-khan",
                            Name = "Gia đình khó khăn",
                            Order = 3
                        },
                        new
                        {
                            CategoryId = 4,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8597),
                            Hide = false,
                            Meta = "benh-nhan-hiem-ngheo",
                            Name = "Bệnh nhân hiểm nghèo",
                            Order = 4
                        },
                        new
                        {
                            CategoryId = 5,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8598),
                            Hide = false,
                            Meta = "nguoi-khuyet-tat",
                            Name = "Người khuyết tật",
                            Order = 5
                        },
                        new
                        {
                            CategoryId = 6,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8600),
                            Hide = false,
                            Meta = "vung-sau-vung-xa",
                            Name = "Vùng sâu vùng xa",
                            Order = 6
                        },
                        new
                        {
                            CategoryId = 7,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8601),
                            Hide = false,
                            Meta = "hoc-sinh-ngheo-hieu-hoc",
                            Name = "Học sinh nghèo hiếu học",
                            Order = 7
                        },
                        new
                        {
                            CategoryId = 8,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8602),
                            Hide = false,
                            Meta = "nan-nhan-thien-tai",
                            Name = "Nạn nhân thiên tai",
                            Order = 8
                        });
                });

            modelBuilder.Entity("CharityConnect.Models.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hide")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.HasKey("DonationId");

                    b.ToTable("Donations");

                    b.HasData(
                        new
                        {
                            DonationId = 1,
                            Amount = 100000,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8619),
                            DonorName = "Nguyễn Văn Hà",
                            Hide = false,
                            Message = "Chúc sức khỏe đến các bệnh nhân",
                            Meta = "",
                            Order = 1,
                            PaymentMethod = 0
                        },
                        new
                        {
                            DonationId = 2,
                            Amount = 200000,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8621),
                            DonorName = "Trần Thị Minh",
                            Hide = false,
                            Message = "Mong rằng mọi người đều mạnh khỏe",
                            Meta = "",
                            Order = 2,
                            PaymentMethod = 1
                        },
                        new
                        {
                            DonationId = 3,
                            Amount = 150000,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8622),
                            DonorName = "Phạm Quốc Anh",
                            Hide = false,
                            Message = "Hy vọng cộng đồng sẽ ngày càng đoàn kết",
                            Meta = "",
                            Order = 3,
                            PaymentMethod = 0
                        },
                        new
                        {
                            DonationId = 4,
                            Amount = 500000,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8624),
                            DonorName = "Võ Thanh Huy",
                            Hide = false,
                            Message = "Gửi chút tấm lòng nhỏ bé",
                            Meta = "",
                            Order = 4,
                            PaymentMethod = 2
                        },
                        new
                        {
                            DonationId = 5,
                            Amount = 300000,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8625),
                            DonorName = "Nguyễn Thị Hương",
                            Hide = false,
                            Message = "Cầu chúc cho mọi người bình an",
                            Meta = "",
                            Order = 5,
                            PaymentMethod = 1
                        },
                        new
                        {
                            DonationId = 6,
                            Amount = 250000,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8627),
                            DonorName = "Lê Văn Dũng",
                            Hide = false,
                            Message = "Chúc chương trình thành công",
                            Meta = "",
                            Order = 6,
                            PaymentMethod = 0
                        },
                        new
                        {
                            DonationId = 7,
                            Amount = 400000,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8628),
                            DonorName = "Phạm Thị Mai",
                            Hide = false,
                            Message = "Hy vọng giúp được các hoàn cảnh khó khăn",
                            Meta = "",
                            Order = 7,
                            PaymentMethod = 2
                        },
                        new
                        {
                            DonationId = 8,
                            Amount = 180000,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8629),
                            DonorName = "Hoàng Văn Phong",
                            Hide = false,
                            Message = "Tôi rất trân trọng những nỗ lực này",
                            Meta = "",
                            Order = 8,
                            PaymentMethod = 1
                        });
                });

            modelBuilder.Entity("CharityConnect.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hide")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8464),
                            Hide = false,
                            Link = "/home",
                            Meta = "trang-chu",
                            Name = "Trang Chủ",
                            Order = 1
                        },
                        new
                        {
                            MenuId = 2,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8475),
                            Hide = false,
                            Link = "/cases",
                            Meta = "hoan-canh",
                            Name = "Hoàn Cảnh",
                            Order = 2
                        },
                        new
                        {
                            MenuId = 3,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8477),
                            Hide = false,
                            Link = "/donations",
                            Meta = "dong-gop",
                            Name = "Đóng Góp",
                            Order = 3
                        },
                        new
                        {
                            MenuId = 4,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8478),
                            Hide = false,
                            Link = "/about",
                            Meta = "thong-tin",
                            Name = "Thông Tin",
                            Order = 4
                        },
                        new
                        {
                            MenuId = 5,
                            DateBegin = new DateTime(2024, 11, 20, 21, 14, 12, 494, DateTimeKind.Local).AddTicks(8479),
                            Hide = false,
                            Link = "/contact",
                            Meta = "lien-he",
                            Name = "Liên Hệ",
                            Order = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CharityConnect.Models.Case", b =>
                {
                    b.HasOne("CharityConnect.Models.Category", "Category")
                        .WithMany("Cases")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CharityConnect.Models.CaseDonation", b =>
                {
                    b.HasOne("CharityConnect.Models.Case", "Case")
                        .WithMany("CaseDonations")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharityConnect.Models.Donation", "Donation")
                        .WithMany("CaseDonations")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Donation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharityConnect.Models.Case", b =>
                {
                    b.Navigation("CaseDonations");
                });

            modelBuilder.Entity("CharityConnect.Models.Category", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CharityConnect.Models.Donation", b =>
                {
                    b.Navigation("CaseDonations");
                });
#pragma warning restore 612, 618
        }
    }
}
